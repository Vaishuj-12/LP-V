#include <iostream>
#include <omp.h>
#include <vector>
#include <climits> 
int main() {
std::vector<int> data = {12, 34, 56, 23, 78, 90, 11, 45, 67, 89};
int n = data.size();
int global_min = INT_MAX;
int global_max = INT_MIN;
int global_sum = 0;
#pragma omp parallel for reduction(min:global_min) reduction(max:global_max) reduction(+:global_sum)
for (int i = 0; i < n; ++i) {
global_min = std::min(global_min, data[i]);
global_max = std::max(global_max, data[i]);
global_sum += data[i];
}
float average = static_cast<float>(global_sum) / n;
std::cout << "Min: " << global_min << std::endl;
std::cout << "Max: " << global_max << std::endl;
std::cout << "Sum: " << global_sum << std::endl;
std::cout << "Average: " << average << std::endl;

return 0;
}